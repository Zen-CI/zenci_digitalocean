<?php
/**
 * @file
 * Prepare testing environment on DigitalOcean.
 * Spin Up VPS to process tests and destroy after.
 */
 
 // URL ZenCI DigitalOcean API.
define('ZENCI_DIGITALOCEAN_API_URI', 'https://api.digitalocean.com/v2');
 
/**
 * Implements hook_config_info().
 */
function zenci_digitalocean_config_info() {
  $prefixes['zenci_digitalocean.settings'] = array(
    'label' => t('DigitalOcean settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 */
function zenci_digitalocean_permission() {
  return array(
    'test job view' => array(
      'title' => t('Access job results'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function zenci_digitalocean_menu() {
  $items = array();

  $items['admin/config/system/digitalocean'] = array(
    'title' => 'DigitalOcean settings',
    'description' => 'DigitalOcean settings.',
    'page callback' => 'zenci_digitalocean_templates',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_digitalocean.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/digitalocean/list'] = array(
    'title' => 'DigitalOcean Templates',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Admin settings page.
  $items['admin/config/system/digitalocean/settings'] = array(
    'title' => 'DigitalOcean settings',
    'description' => 'DigitalOcean settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_digitalocean_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_digitalocean.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/system/digitalocean/template_add'] = array(
    'title' => 'Add template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_digitalocean_template', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_digitalocean.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/digitalocean/instance_add'] = array(
    'title' => 'Add template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_digitalocean_instance', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_digitalocean.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/digitalocean/%/delete'] = array(
    'title' => 'Remove template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_digitalocean_template_remove', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_digitalocean.admin.inc',
    'type' => MENU_CALLBACK,
  );
  

  $items['zenci_joblist'] = array(
    'title' => 'ZenCI tests results',
    'description' => 'View result of tests.',
    'page callback' => 'zenci_digitalocean_job_list',
    'access callback' => 'user_access',
    'access arguments' => array('test job view'),
    'file' => 'zenci_digitalocean.pages.inc',
    'type' => MENU_NORMAL_ITEM,  
  );  

  return $items;
}

/**
 * Implements hook_zenci_webhook().
 */
function zenci_digitalocean_zenci_webhook($method, $data) {
  switch ($method) {
    case 'created':
      /** ZenCI webhook has been created.
       *
       * @param $data array
       *   - owner: GitHub organisation or user.
       *   - repo: GitHub repository name.
       *   - secret: secret used to signature ZenCI webhooks.
       *   - public_key: SSH public_key for ZenCI deploy process.
       */

      break;
    case 'deleted':
      /** ZenCI webhook has been deleted.
       *
       * @param $data array
       *   - owner: GitHub organisation or user.
       *   - repo: GitHub repository name.
       *   - secret: secret used to signature ZenCI webhooks.
       *   - public_key: SSH public_key for ZenCI deploy process.
       */

      break;
    case 'config':
      /** ZenCI config reguest from ZenCI server.
       *
       * @param $data array
       *   - owner: GitHub organisation or user.
       *   - repo: GitHub repository name.
       *   - branch: repository branch that is going to be deployed.
       *
       * @return
       *   array with 'config' value where gitlc.yml file is base64 encoded.
       */
       
       // Create VPS and pass back deploy and testing structure.
      break;
    case 'init':
      /** ZenCI init request from ZenCI server. Happen if it's first deployment. Good to call install script.
       *
       * @param $data array
       *   - config: current config structure. Usefull if provided by .gitlc.yml file in GitHub Repository.
       *     - env_vars: Enviorment values set by script or Gitlc.
       *   - repo_name: GitHub repository name.
       *   - repo_owner: GitHub repository owner.
       *   - branch: repository branch that is going to be deployed.
       *   - pull_request: PR number or FALSE.
       *
       * @return
       *   array with 'env_vars'. All enviotment variables will be available via ENV in scripts.
       */

      break;
    case 'remove':
      /** ZenCI remove request from ZenCI server. Happen if branch deleted or PR closed. Good to cleanup data.
       *
       * @param $data array
       *   - config: current config structure. Usefull if provided by .gitlc.yml file in GitHub Repository.
       *     - env_vars: Enviorment values set by script or Gitlc.
       *   - repo_name: GitHub repository name.
       *   - repo_owner: GitHub repository owner.
       *   - branch: repository branch that is going to be deployed.
       *   - pull_request: PR number or FALSE.
       *
       * @return
       *   Nothig. This webhook happen after remove script get processed.
       */

      // removing VPS 

      break;
  }
  return $data;
}

function zenci_digitalocean_get_value($env_vars, $variable) {
  if (isset($env_vars[$variable])) {
    return $env_vars[$variable];
  }
  FALSE;
}

function zenci_digitalocean_get_class() {
  module_load_include('inc', 'zenci_digitalocean', 'zenci_digitalocean.class');

  $api_token = zenci_digitalocean_get_api_token();
  $digitalOceanAPI = new digitalOceanAPI();
  $digitalOceanAPI->setToken($api_token);
  return $digitalOceanAPI;
}

function zenci_digitalocean_get_api_token() {
  $config = config('zenci_digitalocean.settings');
  
  // Use setting.php values if exists.
  $api_token = settings_get('zenci_digitalocean_api_token');

  if (empty($api_token)) {
    $api_token = $config->get('api_token');
  }
  return $api_token;
}
