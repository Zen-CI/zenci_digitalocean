<?php
/**
 * @file
 * Install, update, and uninstall functions for the ZenCI DigitalOcean module.
 */

/**
 * Implements hook_schema().
 */
function zenci_digitalocean_schema() {

  $schema['zenci_digitalocean_templates'] = array(
    'description' => '{zenci_digitalocean} templates.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique repository ID.',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'name' => array(
        'description' => 'Test name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'size' => array(
        'description' => 'The unique slug identifier for the size.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'image_name' => array(
        'description' => 'Image name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'image_id' => array(
        'description' => 'The image ID of a public or private image, or the unique slug identifier for a public image.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ), 
    ),
    'unique keys' => array(
      'id' => array('id'),
      'name' => array('name'),
    ),
  );
  
  $schema['zenci_digitalocean_instances'] = array(
    'description' => '{zenci_webhook} repository config.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique repository ID.',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'droplet_id' => array(
        'description' => 'A unique identifier for each Droplet instance.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'A Unix timestamp indicating when the droplet was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'owner' => array(
        'description' => 'Repository owner.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'repo' => array(
        'description' => 'Repository name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'branch' => array(
        'description' => 'Github branch name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'pr' => array(
        'description' => 'If test job run for PR - it is a PR number here.',
        'type' => 'varchar',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'Test name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'results' => array(
        'description' => 'Job results data. Conyain serialized array with url to test results and test summary (FAILED, PASSED, total tasks etc)',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),      
      
    ),
    'indexes' => array(
      'owner_name' => array('owner', 'repo'),
      'name' => array('name'),
    ),

    'unique keys' => array(
      'id' => array('id'),
      'droplet_id' => array('droplet_id'),
    ),
  );

  return $schema;
}
